export type { Eq } from "fp-ts/Eq";
export * as EqT from "fp-ts/Eq";
export type { Ord } from "fp-ts/Ord";
export * as OrdT from "fp-ts/Ord";
export type { Monoid } from "fp-ts/Monoid";
export * as Monoid_ from "fp-ts/Monoid";
export type { Monad } from "fp-ts/Monad";
export * as Monad_ from "fp-ts/Monad";
export * as RA from "fp-ts/ReadonlyArray";
export * as RM from "fp-ts/ReadonlyMap";
export * as RS from "fp-ts/ReadonlySet";
export * as RR from "fp-ts/ReadonlyRecord";
export * as M from "fp-ts/Map";
export * as S from "fp-ts/Set";
export * as RNEA from "fp-ts/ReadonlyNonEmptyArray";
export * as NEA from "fp-ts/NonEmptyArray";
export type { ReadonlyRecord } from "fp-ts/ReadonlyRecord";
export type { ReadonlyNonEmptyArray } from "fp-ts/ReadonlyNonEmptyArray";
export type { NonEmptyArray } from "fp-ts/NonEmptyArray";
export * as O from "fp-ts/Option";
export type { Option } from "fp-ts/Option";
export * as E from "fp-ts/Either";
export type { Either } from "fp-ts/Either";
export * as I from "fp-ts/IO";
export type { IO } from "fp-ts/IO";
export { pipe } from "fp-ts/pipeable";
export { flow, identity, constant } from "fp-ts/function";
export type { Endomorphism, Refinement, Predicate, Lazy } from "fp-ts/function";
